<!--
 * Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.

-->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Domain Specific Dashboard for CEP</title>

    <!-- Bootstrap -->
    <link href="../bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-table/1.5.0/bootstrap-table.min.css" rel="stylesheet">
    <link href="../css/default.css" rel="stylesheet">
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
        <!--[if lt IE 9]>
          <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
          <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
          <![endif]-->
     <script type="text/javascript" src="../js/jquery-2.1.1.min.js"></script>
     <script type="text/javascript" src="../js/d3.v3.min.js"></script>
     <script type="text/javascript" src="../js/dagre-d3.min.js"></script>
     <script type="text/javascript" src="../js/tipsy.js"></script>



    <!--template details setting functionality-->
     <script src="../js/GraphConfigs/TemplateConfiguration.js" type="text/javascript"></script>

    <!--condition details setting functionality-->
     <script src="../js/GraphConfigs/ConditionConfiguration.js" type="text/javascript"></script>

    <!--save configuration functionality-->
     <script src="../js/utils/getTemplateWiringJson.js" type="text/javascript"></script>

    <!--edit configuration functionality-->
     <script src="../js/utils/getExistingConfigDetails.js" type="text/javascript"></script>

     <link rel="stylesheet" href="../css/tipsy.css"/>
     <%
        var selectedDomain = request.getParameter("domain");

        var getDomainSpecificDetailsJson = function (xml) {
            var utility = require('../modules/utility.js').rxt_utility();
            var json = utility.xml.convertE4XtoJSON(xml);
            return json;
        }

        include("invokeWebService.jag");

        var getTemplateDomainPayload = '<exec:getTemplateDomain xmlns:exec="http://executiongenerator.eventprocessing.carbon.wso2.org"><exec:domainName>' + selectedDomain + '</exec:domainName></exec:getTemplateDomain>';
        var xmlResponse =  invokeWebService("getTemplateDomain", getTemplateDomainPayload);

        var domainStructureReturnXml = xmlResponse..*::['return'];

        var domainStructureReturnJson = getDomainSpecificDetailsJson(domainStructureReturnXml);

        var domainStructureXmlString = domainStructureReturnJson.return;

        var domainStructureXml = new XML(domainStructureXmlString);

        var templatesDetails = getDomainSpecificDetailsJson(domainStructureXml);

        //Edit Configuration
        //TODO : Take this edit data from the web service
        var existingTemplateNodes,existingTemplateEdges,existingTemplates,configName,configDescription;

        var editSelected = false;

        if(request.getParameter("action")=="edit"){

            var selectedWiringConfigName = request.getParameter("configName");

            include('editConfiguration.jag');

            //call function in editConfiguration to get existing template wiring json
            var templateWiring = getExistingTemplateDetails(selectedWiringConfigName);

            editSelected = true;
        }
    %>

    <script type="text/javascript">

        //variables to store template tree relatedData
        var templateNodes,templateEdges,templates;

        //Show available data for a template, when edit is selected
        function showExistingDetails(clickedTemplateNodeId){

                //initializ template details
                var templateName='',templateType='',parametersValue='',conditionsValue='';
                var isDataAvailable=false;

                 //search for the clicked template node id in existing templates array and
                for(var i in templates){
                    if(templates[i].id == clickedTemplateNodeId){
                            templateName = templates[i].name;
                            templateType = templates[i].type;

                            //showing existing data for parameters
                            var existingTemplateParameters = templates[i].parameters;
                            if(existingTemplateParameters!= null){
                                parametersValue = '';
                                for(var j in existingTemplateParameters ){
                                    parametersValue = parametersValue + existingTemplateParameters[j].name + '=' + existingTemplateParameters[j].value + '  ';
                                }
                            }
                            else{
                                parametersValue = '';
                            }

                            conditionsValue = 'Set';
                            isDataAvailable=true;
                            break;
                    }
                }

                //avoid displaying details table for and,or nodes
                if(isDataAvailable){
                    //display template details
                    $('#templateName').html(templateName);
                    $('#templateType').html('<span title="Click to Set Template Type"><u>' + templateType + '</u></span>');
                    $('#templateType').off();
                    $('#parameters').html(parametersValue);
                    $('#parameters').off();
                    $('#conditions').html(conditionsValue);
                    $('#conditions').off();
                    $('#templateDetailsHeading').show();
                    $('#templateDetails').show();
                    $('#finishTemplate').show();
                }
            };

        $(document).ready(function() {

                //get the template Structure in to a json object
                var templatesStructureJSON = JSON.parse('<%=templatesDetails%>');
                var templateList = templatesStructureJSON.Template;

                //JSON object to store template details specified by user (initially contains the root node)
                var templateDetailsJSON = JSON.parse('{"description":"","name":"","from":"","nodes":[{"id":"0","name":" Node-1 ","parent":"null","order":"root","type":""}],"edges":[],"templates":[]}');

                templateNodes = templateDetailsJSON.nodes;
                templateEdges = templateDetailsJSON.edges;
                templates = templateDetailsJSON.templates;

                //To store d=condition details for the current template
                var conditionNodes=[],conditionEdges=[],conditions=[];

                //to store temporary template nodes and edges to remove
                var templateNodesCopy = [], templateEdgesCopy = [];
                //to store temporary condition nodes and edges to remove
                var conditionNodesCopy = [], conditionEdgesCopy = [];

                //existing template details
                var existingTemplates = [];

                //Whether the configuration is in edit existing configuration mode
                var editSelected = '<%=editSelected%>';

                if(editSelected==="true") {

                    var templateWiring=('<%=templateWiring%>');
                    //get existing configuration details from the wiring json
                    var existingTemplateDetails=getExistingConfigDetails(JSON.parse(templateWiring));

                    templateDetailsJSON.nodes =existingTemplateDetails.nodes;
                    templateDetailsJSON.edges = existingTemplateDetails.edges;
                    templateDetailsJSON.templates = existingTemplateDetails.templates;

                    var configName =existingTemplateDetails.name;
                    var configDescription = existingTemplateDetails.description;

                    templateNodes = templateDetailsJSON.nodes;
                    templateEdges = templateDetailsJSON.edges;
                    templates = templateDetailsJSON.templates;


                    $("#configName").val(configName);
                    $("#configDescription").val(configDescription);

                    templateNodesCopy = JSON.parse(JSON.stringify(templateDetailsJSON.nodes ));
                    templateEdgesCopy = JSON.parse(JSON.stringify(templateDetailsJSON.edges));
                    $('#details').show();
                }

                $('#editDescription').hide();
                $('#updateDescription').hide();
                $('#ConditionConfigHeading').hide();
                $('#conditionCanvasDiv').hide();
                $('#conditionDetailsDiv').hide();

                /**
                 * Utility js functions which handle node configurations
                 */

                 function removeExistingEdges(clickedNodeId, edges, nodeType) {
                    var tempEdges = [];
                    if (nodeType == 'Template') {
                        tempEdges = templateEdgesCopy;
                    }
                    if (nodeType == 'Condition') {
                        tempEdges = conditionEdgesCopy;
                    }
                    var i = 0;
                    for (i = 0; i < tempEdges.length; i++) {
                        if (tempEdges[i].from == clickedNodeId) {
                            removeExistingEdges(tempEdges[i].to, edges, nodeType);

                            //find corresponding index in edges array
                            var j;

                            for (j = 0; j < edges.length; j++) {
                                if (edges[j].to == tempEdges[i].to) break;
                            }
                            edges.splice(j, 1);
                        }
                    }
                };

                function removeExistingChildren(clickedNodeId, nodes, nodeType, nodeData) {

                    var nodesCopy = [];
                    if (nodeType == 'Template') {
                        nodesCopy = templateNodesCopy;
                    }
                    if (nodeType == 'Condition') {
                        nodesCopy = conditionNodesCopy;
                    }
                    var i;

                    for (i = 0; i < nodesCopy.length; i++) {
                        if (nodesCopy[i].parent && nodesCopy[i].parent == clickedNodeId) {

                            removeExistingChildren(nodesCopy[i].id, nodes, nodeType,nodeData);

                            //find corresponding index in nodes array
                            var j, id;

                            for (j = 0; j < nodes.length; j++) {
                                if (nodes[j].id == nodesCopy[i].id) {
                                    id = nodes[j].id;
                                    break;
                                }
                            }
                            nodes.splice(j, 1);
                            //remove any existing template details from node Data array
                            if (nodeData) {
                                for (var k = 0; k < nodeData.length; k++) {
                                    if (nodeData[k].id == id) {
                                        nodeData.splice(k, 1);
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    var k;
                    if (nodeData!=undefined) {
                        for (k = 0; k < nodeData.length; k++) {
                            if (nodeData[k].id == clickedNodeId) {
                                nodeData.splice(k, 1);
                                break;
                            }
                        }
                    }
                };

             function setUpChildrenNodes(clickedNodeId, nodes, edges, nodeType, nodeData) {

                        removeExistingChildren(clickedNodeId, nodes, nodeType, nodeData);
                        removeExistingEdges(clickedNodeId, edges, nodeType);
                        /*Add new children*/
                        var nodesJsonLength = nodes.length;
                        //push two children nodes to the clicked node
                        nodes.push({
                            "id": "" + nodesJsonLength,
                            "name": "Node " + (nodesJsonLength + 1),
                            "parent": clickedNodeId,
                            order: "left"
                        });
                        nodes.push({
                            "id": "" + (nodesJsonLength + 1),
                            "name": "Node " + (nodesJsonLength + 2),
                            "parent": clickedNodeId,
                            order: "right"
                        });

                        //push two edges connecting the nodes
                        edges.push({
                            "from": clickedNodeId,
                            "to": "" + nodesJsonLength
                        });
                        edges.push({
                            "from": clickedNodeId,
                            "to": "" + (nodesJsonLength + 1)
                        });
                        if (nodeType == 'Template') {
                            templateNodesCopy = JSON.parse(JSON.stringify(nodes));
                            templateEdgesCopy = JSON.parse(JSON.stringify(edges));
                        }
                        if (nodeType == 'Condition') {
                            conditionNodesCopy = JSON.parse(JSON.stringify(nodes));
                            conditionEdgesCopy = JSON.parse(JSON.stringify(edges));
                        }
                };


                function drawGraph(g, svg, svgGroup) {
                    //render the graph
                    var renderer = new dagreD3.Renderer();
                    var layout = dagreD3.layout()
                        .nodeSep(50)
                        .edgeSep(50)
                        .rankDir("TB");

                    renderer.layout(layout);

                    layout = renderer.run(g, svgGroup);

                    svg.transition().duration(500)
                        .attr("width", layout.graph().width + 40)
                        .attr("height", layout.graph().height + 40);

                    var styleTooltip = function(name) {
                        var description = "Click on node to initialize";
                        return "<p class='name'>" + "Node " + (parseInt(name) + 1) + "</p><p class='description'>" + description + "</p>";
                    };

                    //display tooltip
                    svgGroup.selectAll("g.node")
                        .attr("title", function(v) {
                            return styleTooltip(v)
                        })
                        .each(function(v) {
                            $(this).tipsy({
                                gravity: "w",
                                opacity: 1,
                                html: true
                            });
                        });

                };

                function updateGraph(nodeType){

                    var graph,label,nodes,edges,svgSelection,svgGroupSelection;
                    if(nodeType=="Template"){
                        nodes=templateNodes;
                        edges=templateEdges;
                        svgSelection = "#templateCanvas";
                        svgGroupSelection = "#templateCanvas g";
                    }
                    else if(nodeType=="Condition"){
                        nodes=conditionNodes;
                        edges=conditionEdges;
                        svgSelection = "#conditionCanvas";
                        svgGroupSelection = "#conditionCanvas g";
                    }
                    graph = new dagreD3.Digraph();
                    for (var i = 0; i < nodes.length; i++) {
                            if(nodeType=="Template"){
                                if(editSelected=="true"){
                                    label='<div onclick= "$(\'#templateChoicesDiv\').show(); $(\'#templateDetails\').hide();' + '$(\'#clickedTemplateNodeId\').text(' + nodes[i].id + ');$(\'#finishTemplate\').hide();javascript:showExistingDetails('+nodes[i].id+');' + '">' + nodes[i].name + '</div>';
                                }
                                else{
                                    label='<div onclick= "$(\'#templateChoicesDiv\').show(); $(\'#templateDetails\').hide();' + '$(\'#clickedTemplateNodeId\').text(' + nodes[i].id + ');$(\'#finishTemplate\').hide();' + '">' + nodes[i].name + '</div>';
                                }
                            }
                            else if(nodeType=="Condition"){
                                label='<div onclick= "$(\'#conditionDetailsDiv\').show();$(\'#conditionChoicesDiv\').show();' + '$(\'#clickedNodeId\').text(' + nodes[i].id + ');' + '">' + nodes[i].name + '</div>';
                            }
                            graph.addNode(nodes[i].id, {label:label});
                    }
                    for (var i = 0; i < edges.length; i++) {
                            graph.addEdge(null, edges[i].from, edges[i].to);
                    }
                    var svg = d3.select(svgSelection);
                    var svgGroup = d3.select(svgGroupSelection);
                    drawGraph(graph, svg, svgGroup);
                };

                function setUpTemplate(clickedTemplateNodeId,choice) {

                        //initialize values for template details
                        var templateName='',templateType = 'Not Set',parametersValue = 'Not Set',conditionsValue = 'Not Set';

                        //whether a template already exists for the clicked node id
                        var exists = false;

                        //whether parameters and conditions are set for the template
                        var isParametersSet=false,isConditionsSet=false;

                        //store already existing parameter data
                        var parameterObjects=[];

                        //initialize variables to store condition data
                        conditionNodes = [{"id":"0","name":" Node-1 ","parent":"null","order":"root","type":""}],conditionEdges = [],conditions = [];

                        //initialize finish template data
                        $('#finishTemplate').html('  <button id="saveTemplate" type="button" class="btn btn-success">Save Template</button>');

                        var initializeTemplateDetails=function(){
                            $('#templateName').html(templateName);
                            $('#templateType').html('<span title="Click to Set Template Type"><u>' + templateType + '</u></span>');
                            $('#parameters').html(parametersValue);
                            $('#conditions').html(conditionsValue);
                            $('#templateDetailsHeading').show();
                            $('#templateDetails').show();
                            $('#finishTemplate').show();
                        };

                        var templateTypeSelection=function(){
                                parametersValue = 'Not Set';
                                conditionsValue = 'Not Set';

                                var templateTypeHtmlData ='<label for="exampleInputEmail1">Select Template Type</label><select class="form-control" id="templateSelection" name="templateSelection">';

                                for (var i = 0; i < templateList.length; ++i) {
                                    templateTypeHtmlData += '<option value=' + templateList[i].name + ' >' + templateList[i].name + '</option>';
                                }
                                templateTypeHtmlData += '</select><button id="templateSelect" type="button" class="btn btn-warning">Select</button>';
                                $('#setTemplateDetails').show();
                                $('#setTemplateDetails').html(templateTypeHtmlData);
                                $('#templateSelect').click(function() {
                                    templateType = $('#templateSelection').val();
                                    $('#templateType').html('<span title="Click to Change Template Type"><u>' + templateType + '</u></span>');
                                    $('#parameters').html('<span title="Click to Set Values for Parameters"><u>' + parametersValue + '</u></span>');
                                    $('#conditions').html('<span title="Click to Set Condition Parameters"><u>' + conditionsValue + '</u></span>');
                                    $('#setTemplateDetails').hide();
                                    //reset condition data
                                    conditionNodes = [{"id":"0","name":" Node-1 ","parent":"null","order":"root","type":""}];
                                    conditionEdges = [];
                                    conditions = [];
                                    conditionEdgesCopy=[];
                                    conditionNodesCopy= [{"id":"0","name":" Node-1 ","parent":"null","order":"root","type":""}];
                                    //reset flags
                                    isParametersSet=false;
                                    isConditionsSet=false;

                                });
                        };

                        var parametersSelection=function(){
                                    //reset any existing parameters
                                    parameterObjects=[];

                                    //parameters for the selected template
                                    var parameters=[];

                                     //get parameters for the selected template
                                    for (i = 0; i < templateList.length; ++i) {
                                        if (templateList[i].name == templateType) {
                                            if (templateList[i].Parameters != undefined) {
                                                parameters = templateList[i].Parameters[0].Parameter;
                                            }
                                            break;
                                        }
                                    }
                                    //get html data for parameters
                                    var parameterData = getParameterData(parameters);

                                    $('#setTemplateDetails').html(parameterData);
                                    $('#setTemplateDetails').show();
                                    $('#saveParameters').click(function() {
                                        isParametersSet=true;
                                        var parameterData=saveDirectParameters(parameters,parameterObjects);
                                        $('#parameters').html(parameterData);
                                        $('#setTemplateDetails').html('');
                                        $('#setTemplateDetails').hide();
                                    });
                        };

                        var conditionsSelection=function(){
                                $('#setTemplateDetails').html('')
                                $('#setTemplateDetails').show();
                                $('#ConditionConfigHeading').show();
                                $('#conditionCanvasDiv').show();
                                $('#conditionDetailsDiv').show();
                                drawConditionGraph(templateType);
                                isConditionsSet=true;
                        };

                        var checkIncompleteness=function(){
                            if(templateType=='Not Set'){
                                    alert('Please set a template type!');
                                    return true;
                                }
                                else if(!isParametersSet){
                                    alert('Please set parameters!');
                                    return true;
                                }
                                else if(!isConditionsSet){
                                    alert('Please set conditions!');
                                    return true;
                            }
                            else{
                                return false;
                            }
                        };

                        var saveTemplate=function(){
                                var isIncomplete=checkIncompleteness();
                                if(!isIncomplete){
                                    var alreadyIn=false;
                                    var alreadyInTemplateIndex;

                                    for(var i=0;i<templates.length;++i){
                                        if(templates[i].id==clickedTemplateNodeId){
                                            alreadyIn=true;
                                            alreadyInTemplateIndex=i;
                                            break;
                                        }
                                    }
                                    var conditionParameters = {"nodes" : conditionNodes, "edges" : conditionEdges, "conditions" : conditions};

                                    //add a new template if the template is not already added
                                    if(!alreadyIn){
                                        templates.push({"id":clickedTemplateNodeId,"name":templateName,"type":templateType,"parameters":parameterObjects,"conditionParameters":conditionParameters});
                                        existingTemplates = JSON.parse(JSON.stringify(templates));
                                    }

                                    //replace details of the existing template
                                    else{
                                        templates[alreadyInTemplateIndex].name=templateName;
                                        templates[alreadyInTemplateIndex].type=templateType;
                                        templates[alreadyInTemplateIndex].parameters=parameterObjects;
                                        templates[alreadyInTemplateIndex].conditionParameters=conditionParameters;
                                        existingTemplates = JSON.parse(JSON.stringify(templates));
                                    }
                                    $('#templateDetailsHeading').hide();
                                    $('#templateDetails').hide();
                                    $('#finishTemplate').hide();

                                    //Update template details in the graph
                                    setUpClickedNode('Template(Details-Completed)',"Template",clickedTemplateNodeId,templateType,templateEdgesCopy,templateNodesCopy);



                                }
                        };

                        templateName=setTemplateName(existingTemplates,clickedTemplateNodeId,exists);

                        //Set existing template data
                        var existingTemplateData=setExistingTemplateData(templates,clickedTemplateNodeId,templateName,parameterObjects);
                        var templateExists=existingTemplateData.templateExists;
                        if(templateExists){
                            templateType=existingTemplateData.templateType;
                            isParametersSet=existingTemplateData.isParametersSet;
                            parametersValue=existingTemplateData.parametersValue;
                            isConditionsSet=existingTemplateData.isConditionsSet;
                            conditionsValue=existingTemplateData.conditionsValue;
                            conditionNodes = existingTemplateData.conditionParameters.nodes;
                            conditionEdges = existingTemplateData.conditionParameters.edges;
                            conditions = existingTemplateData.conditionParameters.conditions;
                        }


                        initializeTemplateDetails();

                        //allow to change template type which definitely changes parameters and condition parameters also (For Editing or New)
                        if(choice == "template"){
                            $('#templateType').click(function() {
                                    templateTypeSelection();
                                    $('#parameters').click(function() {
                                        parametersSelection();
                                    });
                                    $('#conditions').click(function() {
                                        conditionsSelection();
                                });
                            });
                        }

                        //allow to change parameters and condition parameters with same template type (For Editing)
                        else if(choice == "details"){
                            $('#templateType').click(function() {
                                templateTypeSelection();
                            });
                            $('#parameters').click(function() {
                                    parametersSelection();
                            });
                            $('#conditions').click(function() {
                               conditionsSelection();
                            });
                        }

                        $('#saveTemplate').click(function(){
                                saveTemplate();
                        });

                };

                function setUpConditions(clickedNodeId,templateType) {

                        //variable to store conditions for the template
                        var conditionParameters=[];

                        var setCondition=function() {

                            // intialize parameter and condition variables
                            var condition = '', parameter = '';

                            var initializeConditionHtml=function(){
                                    $('#saveConditionData').html('<button id="saveCustomCondition" type="button" class="btn btn-success">Save Condition</button>');
                                    $('#setCondition').show();
                                    $('#connector').show();

                                    //set Condition input
                                    $('#input').show();

                                    //setCondition Selection
                                    var selectConditionParameterHtmlData = setConditionSelection(conditionParameters);
                                    $('#selectParameter').html(selectConditionParameterHtmlData);

                            };

                            var resetConditionFields=function(){
                                $('#selection').show();
                                $('#saveConditionData').show();
                                $('#selectValue').html('');
                                $('#conditionDetails').hide();
                            };

                            var finishCondition=function(){
                                condition = $('#customCondition').val();

                                if(condition==''){
                                    alert('Condition cannot be empty!');
                                    setCondition();
                                }
                                else{
                                    $('#setCondition').hide();

                                    var i;
                                    var alreadyAdded=false;
                                    var alreadyAddedIndex;

                                    for(i=0;i<conditions.length;++i){
                                        if(conditions[i].id==clickedNodeId){
                                            alreadyAdded=true;
                                            alreadyAddedIndex=i;
                                        }
                                    }
                                    //Add a new condition
                                    if(!alreadyAdded){
                                            conditions.push({
                                                    "id": clickedNodeId,
                                                    "value": condition
                                            });
                                    }
                                    //replace value of an already added condition
                                    else{
                                        conditions[alreadyAddedIndex].value=condition;
                                    }

                                    //update condition data on the graph
                                    setUpClickedNode(condition,"Condition",clickedNodeId,templateType,conditionEdgesCopy,conditionNodesCopy);

                                    //reset condition
                                    $('#customCondition').val('');

                                }
                                //reset to previous state
                                resetConditionFields();
                            };

                            initializeConditionHtml();

                            //when user chooses to set a condition based on a selected parameter
                            $('#parameterButton').click(function() {

                                $('#input').hide();
                                $('#connector').hide();

                                parameter = $('#parameter').val();

                                //get parameter type for the selected parameter
                                var parameterType = '';
                                for (var i = 0; i < conditionParameters.length; ++i) {
                                    if (conditionParameters[i].name == parameter) {
                                        parameterType = conditionParameters[i].type;
                                    }
                                }

                                var conditionFieldData = getConditionFields(parameterType);
                                conditionFieldData += '<br></select><button id="saveCondition" type="button" class="btn btn-success">Save Condition</button>'
                                $('#selectValue').html(conditionFieldData);

                                $('#saveCondition').click(function() {
                                    var operator = $('#operator').val();
                                    var value = $('#value').val();

                                    //set the condition value
                                    $("#customCondition").val(parameter  + operator +  value);
                                    finishCondition();

                                });
                            });

                            //when user chooses to manually type the condition
                            $('#saveCustomCondition').click(function() {

                                $('#selection').hide();
                                $('#connector').hide();
                                finishCondition();

                            });

                        };

                        conditionParameters= getConditionParameters(templateList,templateType);

                        //set Allowed conditions
                        var conditionsHtmlData=getAllowedConditionsHtmlData(conditionParameters);
                        $('#conditionDetails').html(conditionsHtmlData);
                        $('#conditionDetails').show();

                        setCondition();

                };

                function setUpClickedNode(choice,nodeType,clickedNodeId,templateType,edgesCopy,nodesCopy) {

                    if(choice =="and" || choice ==  "or"){

                        if(nodeType=="Condition"){
                            conditionNodes[clickedNodeId].name = choice;
                            conditionNodes[clickedNodeId].type = choice;
                            setUpChildrenNodes(clickedNodeId, conditionNodes, conditionEdges, nodeType, conditions);

                        }

                        else if(nodeType=="Template"){
                            templateNodes[clickedNodeId].name = choice;
                            templateNodes[clickedNodeId].type = choice;
                            setUpChildrenNodes(clickedNodeId, templateNodes, templateEdges, nodeType, templates);
                        }
                    }

                    else if (choice == "condition"){
                        //change the name of node as condition
                        conditionNodes[clickedNodeId].name = choice;

                        //check if node already has data

                        var conditionDataArray = conditions;

                        for(var i in conditionDataArray){
                            if(conditionDataArray[i].id == clickedNodeId){
                                $("#customCondition").val(conditionDataArray[i].value);
                                break;
                            }
                        }

                        removeExistingChildren(clickedNodeId, conditionNodes, nodeType,conditions);
                        removeExistingEdges(clickedNodeId, conditionEdges,nodeType);

                        conditionNodesCopy = JSON.parse(JSON.stringify(conditionNodes));
                        conditionEdgesCopy = JSON.parse(JSON.stringify(conditionEdges));

                        setUpConditions(clickedNodeId,templateType);
                    }
                    else if (choice == "template"){
                        //change the name of node as template
                        templateNodes[clickedNodeId].name = choice;

                        removeExistingChildren(clickedNodeId, templateNodes, nodeType,templates);
                        removeExistingEdges(clickedNodeId, templateEdges, nodeType);

                        templateNodesCopy = JSON.parse(JSON.stringify(templateNodes));
                        templateEdgesCopy = JSON.parse(JSON.stringify(templateEdges));

                        setUpTemplate(clickedNodeId,"template");
                    }

                    //when edit is selected
                    else if (choice == "details"){

                        var nodesType = templateNodes[clickedNodeId].type;

                        if(nodesType=="template"){
                            templateNodes[clickedNodeId].name = "template";
                            setUpTemplate(clickedNodeId,"details");
                        }
                    }
                    //when data is set and the graph needs to be updated
                    else {

                        if(nodeType == "Condition"){
                            conditionNodes[clickedNodeId].name = choice;
                            conditionNodes[clickedNodeId].type = 'condition';
                        }

                        else if(nodeType == "Template"){
                            templateNodes[clickedNodeId].name = choice;
                            templateNodes[clickedNodeId].type = 'template';
                        }

                    }

                    updateGraph(nodeType);

                    if(nodeType=="Condition"){
                        $("#conditionChoicesDiv").hide();
                    }
                    else if(nodeType == "Template"){
                        $("#templateChoicesDiv").hide();
                    }

                };

                function drawTemplateGraph() {

                    //variables to store data specific to the graph
                    var nodeType = 'Template';
                    var templateType = "none";
                    var clickedNodeId;

                    templateDetailsJSON.from=templatesStructureJSON.name;

                    //update copies of template nodes and edges
                    templateNodesCopy = JSON.parse(JSON.stringify(templateNodes));
                    templateEdgesCopy = JSON.parse(JSON.stringify(templateEdges));

                    updateGraph(nodeType);

                    //Node Choices Functionality

                    $("#template").click(function() {
                        $('#finishTemplate').show();
                        clickedNodeId = $("#clickedTemplateNodeId").text();
                        setUpClickedNode("template",nodeType,clickedNodeId,templateType,templateEdgesCopy,templateNodesCopy);
                    });

                    $("#and").click(function() {
                        clickedNodeId = $("#clickedTemplateNodeId").text();
                        setUpClickedNode("and",nodeType,clickedNodeId,templateType,templateEdgesCopy,templateNodesCopy);
                    });

                    $("#or").click(function() {
                        clickedNodeId = $("#clickedTemplateNodeId").text();
                        setUpClickedNode("or",nodeType,clickedNodeId,templateType,templateEdgesCopy,templateNodesCopy);
                    });

                    $("#details").click(function() {
                        clickedNodeId = $("#clickedTemplateNodeId").text();
                        setUpClickedNode("details",nodeType,clickedNodeId,templateType,templateEdgesCopy,templateNodesCopy);
                    });

                };

                function drawConditionGraph(templateType) {

                    //variables to store data specific to condition graph
                    var nodeType = 'Condition';
                    var clickedNodeId;

                    //update copies of condition nodes and edges
                    conditionNodesCopy = JSON.parse(JSON.stringify(conditionNodes));
                    conditionEdgesCopy = JSON.parse(JSON.stringify(conditionEdges));

                    //update html data to show finish setting conditions
                    $('#finishSettingConditions').html('<button id="finishConditions" type="button" class="btn btn-success">Finish Setting Conditions</button>');
                    $('#finishSettingConditions').show();

                    //Draw root node on canvas
                    updateGraph(nodeType);

                    //Condition Choices Functionality

                    $("#condition").click(function() {
                        clickedNodeId = $("#clickedNodeId").text();
                        setUpClickedNode("condition",nodeType,clickedNodeId,templateType,conditionEdgesCopy,conditionNodesCopy);
                    });

                    $("#and_condition").click(function() {
                        clickedNodeId = $("#clickedNodeId").text();
                        setUpClickedNode("and",nodeType,clickedNodeId,templateType,conditionEdgesCopy,conditionNodesCopy);
                    });

                    $("#or_condition").click(function() {
                        clickedNodeId = $("#clickedNodeId").text();
                        setUpClickedNode("or",nodeType,clickedNodeId,templateType,conditionEdgesCopy,conditionNodesCopy);
                    });

                    $('#finishConditions').click(function(){
                        var isCompleted=true;
                        for(var i=0;i<conditionNodes.length;++i){
                            if(conditionNodes[i].type==undefined|conditionNodes[i].type==""){
                                isCompleted=false;
                                window.alert('Please Complete Condition Structure ! ');
                                break;
                            }
                        }
                        if(isCompleted==true){
                            $('#ConditionConfigHeading').hide();
                            $('#conditionCanvasDiv').hide();
                            $('#conditionDetailsDiv').hide();
                            $('#conditionMessage').hide();
                            $('#finishSettingConditions').hide();
                            $('#setTemplateDetails').hide();
                            //update conditions for the relevant template
                            $('#conditions').html('<span title="Click to Change Condition Parameters"><u>Set</u></span>');


                        }
                        else{
                            //Allow user to complete the structure
                            updateGraph(nodeType);
                        }
                    });
                };

                window.onload = function() {
                    $('#heading').html('<h3 class="panel-title">Template configuration for '+'<%=selectedDomain%>'+' domain</h3>');
                    $('#setTemplateConfig').hide();
                    $('#templateCanvasDiv').hide();
                    $('#templateDetailsDiv').hide();
                    $('#TemplateConfigHeading').hide();
                    $('#finishTemplates').hide();

                };

                $('#saveDescription').click(function() {
                    var name=$('#configName').val();
                    var description=$('#configDescription').val();
                    if(name=='' | description==''){
                        alert("Configuration Name and Description cannot be empty!");
                        return;
                    }
                    templateDetailsJSON.name = name;
                    templateDetailsJSON.description = description;

                    $('#setConfigDescription').hide();
                    $('#name').html('Template configuration - '+templateDetailsJSON.name);
                    $('#description').html(templateDetailsJSON.description);
                    $('#setTemplateConfig').show();
                    $('#TemplateConfigHeading').show();
                    $('#templateCanvasDiv').show();
                    $('#templateDetailsDiv').show();

                    $('#finishTemplates').show();
                    drawTemplateGraph();
                });

                $('#finishTemplates').click(function() {

                    var isConfigurationCompleted = true;
                    var i;

                    //Check whether configuration data is completed
                    for (i = 0; i < templateDetailsJSON.nodes.length; ++i) {
                        if (templateDetailsJSON.nodes[i].type == undefined | templateDetailsJSON.nodes[i].type == "") {
                            isConfigurationCompleted = false;
                            window.alert('Please Complete Template structure!');
                            break;
                        }
                    }

                    //if All data is completed save the configuration
                    if (isConfigurationCompleted == true) {
                            var templateWiringJson=setTemplateConfiguration(templateDetailsJSON);
                            $.ajax({
                                url : "saveTemplateConfiguration.jag",
                                data : {
                                    templateWiring : JSON.stringify(templateWiringJson)
                                },
                                type : "POST",
                                success : function() {
                                  alert('Successfully Completed');
                                  window.location = "../index.jag";
                                }

                            });
                    }
                    else {//Otherwise allow user to Complete the Configuration
                            drawTemplateGraph();
                    }


                });

            });

    </script>

</head>

<body>




    <nav id="dom-spec-navbar" class="navbar navbar-inverse navbar-fixed-top">
            <div class="container-fluid">
                <div class="navbar-header">
                    <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
                        <span class="sr-only">Toggle navigation</span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                    </button>
                    <a class="navbar-brand" href="../index.jag">
                        Domain Specific Dashboard for CEP
                    </a>
                </div>

            </div>
        </nav>

    <div class="container-fluid" id="setConfigDescription">
            <div class="row padtop100">
                <div class="col-sm-offset-2 col-md-offset-2 col-sm-8 col-md-8">
                    <div id="" class="panel panel-default">
                        <div id="heading" class="panel-heading">

                        </div>
                        <div class="panel-body">
                            <form>
                              <div class="form-group">
                                <label for="exampleInputEmail1">Please Specify a Name for this Configuration</label>
                                <textarea class="form-control" placeholder="Configuration Name" id="configName" rows="1" cols="70" required></textarea>
                            </div>

                            <div class="form-group">
                                <label for="exampleInputPassword1">Please Specify a Description for this Configuration </label>
                                <textarea class="form-control" placeholder="Configuration Description" id="configDescription" rows="3" cols="70" required></textarea>
                            </div>
                            <div class="form-group">
                              <button type="button" id="saveDescription" class="btn btn-success">Save</button>
                          </div>
                      </form>
                  </div>
              </div>
            </div>
          </div>
    </div>

    <div class="container-fluid" id="setTemplateConfig">
        <div class="row padtop100" id="div1">
            <div class="col-sm-offset-2 col-md-offset-2 col-sm-8 col-md-8">

                    <div id="" class="panel panel-default" id="div3">
                        <div class="panel-heading">
                            <h3 class="panel-title" id="name"></h3>
                        </div>
                        <div class="panel-body" id="div4">
                            <p>
                                Description :
                                <span class="text-muted" id="description"></span>
                            </p>

                        </div>
                    </div>
            </div>
        </div>
    </div>

    <div class="container-fluid" id="TemplateConfigHeading">
            <div class="row padtop100" id="div1">
            <div class="col-sm-offset-2 col-md-offset-2 col-sm-8 col-md-8">

                    <div id="" class="panel panel-default" id="div3">
                        <div class="panel-heading">
                            <h3 class="panel-title" id="name">Please Build Template Structure in the Canvas Below</h3>
                        </div>
                    </div>

            </div>
        </div>
    </div>
    <div class="container-fluid" id="templateCanvasDiv">

        <svg id="templateCanvas" class="row padtop100.col-sm-6 col-md-6">
            <g transform="translate(400,100)"></g>
        </svg>

    </div>

    <div class="container-fluid" id="ConditionConfigHeading">
            <div class="row padtop100" id="div1">
            <div class="col-sm-offset-2 col-md-offset-2 col-sm-8 col-md-8">

                    <div id="" class="panel panel-default" id="div3">
                        <div class="panel-heading">
                            <h3 class="panel-title" id="name">Please Build Condition Structure for the selected template in the Canvas Below</h3>
                        </div>
                    </div>

            </div>
        </div>
    </div>

    <div class="container-fluid" id="conditionCanvasDiv">

            <svg id="conditionCanvas" class="row padtop100.col-sm-6 col-md-6">
                <g transform="translate(400,100)"></g>
            </svg>

    </div>

    <div class="container-fluid" id="conditionDetailsDiv">
            <div class="row padtop100" >
            <div class="col-sm-offset-2 col-md-offset-2 col-sm-8 col-md-8">
                    <div id="" class="panel panel-default">
                        <div class="panel-body">
                            <form>
                                <div align="center" id="conditionChoicesDiv">
                                    <div class="form-group">
                                        <label for="">Select the type of node to include</label>
                                    </div>
                                    <div class="form-group">
                                        <button id="condition" type="button" class="btn btn-danger">CONDITION</button>
                                        <button id="and_condition" type="button" class="btn btn-info">AND</button>
                                        <button id="or_condition" type="button" class="btn btn-success">OR</button>

                                    </div>
                                </div>

                                <div class="form-group" id="conditionDetails" align="center"></div>

                                <div class="form-group" id="setCondition" align="center">
                                  <div id="left">
                                     <div id="selection" >
                                         <div id="selectParameter"></div>
                                         <div id="selectValue"></div>
                                    </div>
                                  </div>
                                  <br><br>
                                  <div id="connector">OR</div>

                                     <div id="input" >
                                         <label for="exampleInputEmail1">Specify a Custom Condition</label>
                                         <textarea class="form-control" id="customCondition" rows="3" cols="70" required></textarea>
                                         <div class="form-group" id="saveConditionData">
                                        </div>
                                    </div>
                                    </div>

                                 <div id = "clickedNodeId"></div>
                                 <div id="conditionMessage" align="center">Click Below to complete Condition Structure</div>
                                <div class="form-group" align="center" id="finishSettingConditions">

                                </div>
                            </form>
                        </div>
                    </div>
                    </div>
            </div>
        </div>


    <div class="container-fluid" id="templateDetailsDiv">
            <div class="row padtop100" id="div1">
            <div class="col-sm-offset-2 col-md-offset-2 col-sm-8 col-md-8">
                    <div id="" class="panel panel-default">
                        <div class="panel-body">
                            <form>
                                <div id="templateChoicesDiv">
                                    <div class="form-group">
                                        <label for="">Select the type of node to include</label>
                                    </div>
                                    <div class="form-group">
                                        <button id="template" type="button" class="btn btn-danger">TEMPLATE</button>
                                        <button id="and" type="button" class="btn btn-info">AND</button>
                                        <button id="or" type="button" class="btn btn-success">OR</button>
                                        <button id="details" type="button" style="display: none;" class="btn btn-info">EDIT</button>
                                    </div>
                                </div>
                                <div class="form-group" id="templateDetailsHeading">
                                        <label for="">Details for Selected Template</label>
                                </div>
                                <table id="templateDetails" class="table table-bordered table-condensed">
                                    <tbody>
                                        <tr>
                                            <td><strong>Template Name</strong></td>
                                            <td id="templateName"></td>
                                        </tr>
                                        <tr>
                                            <td><strong>Template Type</strong></td>
                                            <td id="templateType"></td>
                                        </tr>
                                        <tr>
                                            <td><strong>Parameters</strong></td>
                                            <td id="parameters"></td>
                                        </tr>
                                        <tr>
                                            <td><strong>Conditions</strong></td>
                                            <td id="conditions"></td>
                                        </tr>
                                    </tbody>
                                </table>

                                <div class="form-group" id="setTemplateDetails" align="center"></div>
                                <div id="clickedTemplateNodeId"></div>
                                <div class="form-group" id="finishTemplate">
                                </div>
                                <div class="form-group">
                                  <button id="finishTemplates" type="button" class="btn btn-success">Finish Template Configuration</button>
                                </div>

                            </form>
                        </div>
                    </div>
                    </div>
            </div>
        </div>





      <footer class="footer container-fluid">
    <p class="copyrights t-center">&copy; 2015 WSO2 Inc. All Rights Reserved</p>
</footer>


<script type="text/javascript" src="../bootstrap/js/bootstrap.min.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-table/1.5.0/bootstrap-table.min.js"></script>


</body>

</html>


